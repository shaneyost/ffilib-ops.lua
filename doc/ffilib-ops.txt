==============================================================================
------------------------------------------------------------------------------
Ok, so tutorials/examples are fun and all but I need to dig deeper to
understand what all this means. I would like to do so without the
distraction of ffi's metatype. I shouldn't be focusing on metatypes just
quite yet. So lets start with `ffi.cdef`.

The docs say the following ...

> Adds multiple C declarations for types or external symbols (named
  variables or functions). The arg `def` must be a Lua string. It's
  recommended to use the syntactic sugar for string arguments (e.g. [[]]).

  The contents of the string must be a sequence of C declarations,
  separated by semicolons.

This is alot and sparks so more questions. Lets get these questions out of
the way first.

- What is implied by 'multiple C declaration'? I'm only specifying one in
  my code. Does it mean I can technically pass several?

    > Yes, I can pass multiple declarations in a single call to `ffi.cdef`
      An example of doing so ...

Usage ~
>lua
        ffi.cdef([[
            typedef struct { int x; float y; } foo_t;
            typedef struct { int a; int b; } bar_t;
            int do_stuff(int x, float y);
            int do_more(int a, int b);
        ]])
<

- What is happening here with my declarations? What does it do with it?

    > When I call `ffi.cdef`, LuaJIT parses the C declaration I provided.
      It adds them to a internal C type registry. LuaJIT then allows me to
      use those types for allocating memory `ffi.new`, casting pointers
      `ffi.cast` and calling external C functions via a library `ffi.load`
    >
    > It does not generate any actual code though or memory. It only is
      declaring types, function signatures and external symbols. I can
      think of it like providing LuaJIT a little .h file saying "Yo,
      here's the stuff I want to work, please recognize it."

Ok, not too bad. So if we can register C declarations now why use the
method `ffi.typeof(type)`. Didn't I just tell LuaJIT to recognize that
type?

    > `ffi.cdef` registers a type globally so LuaJIT knows what it is. Now
      `ffi.typeof() creates a handle to that type that I can use
      efficiently in Lua.

Cool, so it gives me a Lua object I can treat like a constructor then. But
hold up, what does `ffi.new` do? Am I not suppose to use it too? What am I
missing?

    > So after `ffi.cdef` it's stored in LuaJIT's memory or registry but
      I'm not using it yet. Ah, `ffi.typeof` is a shortcut for making more
      of these structures. So `ffi.typeof` is giving me a typed
      constructor function or "handle" which is just a reusable helper for
      making a thing. So what is `ffi.new` then?
    >
    > It turns out `ffi.new` is kind of the same thing as `ffi.typeof` but
      it must first lookup the type every time. I see now why the shortcut
      option is more friendly especially I want to create several of them.

Usage ~
>lua
        -- why do this ...
        local a = ffi.new("Point_t")
        local b = ffi.new("Point_t")

        -- when I can do this
        local Point = ffi.typeof("Point_t")
        local x = Point()
        local y = Point()
<

So we return this typed constructor function (i.e. handle) so as to avoid
looking up the type by string every time, slightly faster less overhead,
and it's cleaner.

Lastly, I feel like i'm repeating myself by passing in "type". It's in the
"def" already. This goes against DRY (Don't Repeat Yourself). However, it
would add complexity requiring parsing. This gives no real gain in time
nor space in fact it would make it worse. So, I feel justified in leaving
it the way it is.


==============================================================================
------------------------------------------------------------------------------
Some nuts to crack for next week. I should review the use of the following
functions `ffi.string`, `ffi.cast`. This example essentially reflects what
I will use in my table tool. These two functions I haven't really touched
on yet. Some initial questions to start thinking about for next week.

- Review again what (a) really represents and why we are casting it to a
  `const char *`. Think about why you're doing this. For example, would
  you do the same thing in C if you were going to write (a) to a file?

- We already know why we're deciding to pack everything to 1-byte
  alignment. To solidfy our reasoning go over this again (i.e write it out
  on why it's important for cross platform compatibility).

- Write a small response describing why we're using attributes here vs the
  preprocessor statement `#pragma pack`. Refer to the warning statement in
  the ffi documentation and quote that here so we remember "the why".

- If we could represent (a) not just as a struct but also as a raw byte
  array it would make file i/o easier. For example, could implement a
  union or similiar concept? See if you can use metatable to set this up.


==============================================================================
------------------------------------------------------------------------------
                                                                    *FF04.new()*
                           `FF04.new`({def}, {type})
If I call `type(ffi.typeof(type)` this tells me very little. It just tells
me `cdata`. This is actually a cdata constructor object which is callable.

If I wanted to know that (a) is of type (Point) I could call something
like the following. This is about it from what I can gather.

Usage ~
Lua >
    print(ffi.istype(Point, a))
<

It's important to know that (a) is a cdata struct, and LuaJIT stores it in
FFI-managed memory by value. So (a) contains the full struct itself. This
is all out of the FFI documentation.

One little side note. If happened to type ffi.typeof(a) then it will
return its concrete FFI type being a cdata object. However, if I register
a type with ffi.cdef it call it on that ffi.typeof('Point_t') then it will
return a type constructor. So if I called ffi.typeof(Point) it would give
me a concrete FFI type not a type constructor.

------------------------------------------------------------------------------
This is an example where it would not give me a type constructor and just
give me the FFI concrete type.


==============================================================================
------------------------------------------------------------------------------
I know the answer to this question but I want to write it out. The
question is why would I pack C structures in my table tool. What issues
does packed 1-byte alignment fix?

If we don’t explicitly pack our C structures to 1-byte alignment, the
compiler or in our case, LuaJIT’s FFI subsystem may insert padding
between structure members to satisfy platform-specific alignment rules.
These rules align fields to their natural boundaries (e.g., `uint16_t` on
2-byte boundaries, `uint32_t` on 4-byte boundaries), which helps optimize
memory access but alters the raw memory layout.

This implicit padding creates gaps between fields that can lead to binary
incompatibility when the structure is serialized (e.g., written to a file
or transmitted) and later interpreted by a C program expecting a
different layout. As a result, the binary layout may no longer perfectly
superimpose a corresponding C structure in a compiled target application,
causing ABI (Application Binary Interface) conflicts.

To avoid this, we pack our structures to 1-byte alignment, which
guarantees a deterministic, tightly packed memory layout with no padding.
This ensures that the generated binary representation is consistent and
interpretable by C code, regardless of how it was generated.

It’s important that our table tool can run on any host architecture (x86,
ARM, little-endian, big-endian) and still produce reliable, deterministic
output that is compatible with the target architecture's expectations.
Packing the structure removes alignment dependencies from the host system
making the tool's output portable and ABI-safe.


==============================================================================
------------------------------------------------------------------------------
                                                                    *FF06.new()*
                           `FF06.new`({cdef}, {type})
Say I wanted to simplify io such as create table files, logging or just
simple hex dumps. What makes sense and what doesn't? How could I leverage
metatables to implement my idea?

We will want the ability to add behavior to our cdata type constructor for
methods and behaviors. Because we're using FFI library we use the method
called `ffi.metatype` here NOT `setmetatable`.

Right away I know that I will represent the metamethod __index as a table.
I would like to wrap ffi methods a bit but only what makes sense. So a
method like `size` would be nice. Another method for returning a lua
immutable string (raw byte array really) would also be nice for file i/o.

Ok so that takes care of alot but what about logging/dumping the raw data?
I think __tostring metamethod makes the most sense here. Later I might
choose too implement a separate dumping function for just dumpting the raw
data and make __tostring the more elaborate dump with custom string
formatting.

Usage ~
Lua >
    -- Easy file i/o
    file:write(p:to_byte_string())
    -- Printable/Resuable
    print(p)
    print(p:size())
<

>lua
  function FF06.new(cdef, type)
      ffi.cdef(cdef)
      return ffi.metatype(ffi.typeof(type), {
          __index = {
              to_byte_string = function(self)
                  return ffi.string(self.raw, self:size())
              end,
              size = function(self)
                  return ffi.sizeof(self)
              end,
          },
          __tostring = function(self)
              local out = {}
              for i = 0, self:size() - 1 do
                  local fmt = string.format("%02X", self.raw[i])
                  table.insert(out, fmt)
              end
              return table.concat(out, " ")
          end,
      })
  end

  local cdef = [[
  typedef union
  {
      struct
      {
          uint8_t x;
          uint8_t y;
      };
      uint8_t raw[2];
  } __attribute__((__packed__)) Point_u;
  ]]
<
------------------------------------------------------------------------------


 vim:tw=78:ts=8:noet:ft=help:norl: